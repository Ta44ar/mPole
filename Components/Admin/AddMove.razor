@page "/moves/add"

@inject ISnackbar Snackbar
@inject NavigationManager nav
@inject IImageService imageService
@inject IMoveService moveService
@inject IWebHostEnvironment Environment

<PageTitle>Dodaj figurę</PageTitle>

    @if (isLoading)
    {
        <Loader />
    }
    else
    {
        <EditForm Model="move" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="10">
                    <MudTextField @bind-Value="move.Name" Label="Nazwa:" />
                </MudItem>
                <MudItem xs="2" Class="justify-end">
                    <MudText>Poziom trudności:</MudText>
                    <MudRating SelectedValue="0" SelectedValueChanged="SetDifficulty" @bind-Value="move.DifficultyLevel"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="move.Description" Lines="5" Label="Opis figury:" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem>
                    <InputFile OnChange="UploadImages" multiple />
                </MudItem>
                <MudItem>
                    @if (urlImages.Any())
                    {
                        <div>
                            <MudText>Dołączone multimedia:</MudText>
                            <div class="image-thumbnails">
                                @foreach (var imageUrl in urlImages)
                                {
                                    <img src="@imageUrl" alt="Miniatura" class="thumbnail" />
                                }
                            </div>
                        </div>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Zapisz</MudButton>
                    <MudButton Color="Color.Secondary" OnClick="Cancel">Anuluj</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    }

<style>
    .thumbnail {
        width: 200px;
        height: 200px;
        object-fit: cover;
        margin: 5px;
    }

    .image-thumbnails {
        display: flex;
        flex-wrap: wrap;
    }
</style>

@code {
    private Move move = new Move();
    private bool isLoading = false;
    private MoveValidator moveValidator = new MoveValidator();
    private IList<string> urlImages = new List<string>();

    private async Task HandleValidSubmit()
    {
        var validationResult = await moveValidator.ValidateAsync(move);
        if (!validationResult.IsValid)
        {
            foreach (var error in validationResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, MudBlazor.Severity.Error);
            }
            return;
        }

        try
        {
            isLoading = true;
            await moveService.AddNewMoveAsync(move, CancellationToken.None);
            Snackbar.Add("Pomyślnie dodano figurę!", MudBlazor.Severity.Success);
            nav.NavigateTo("/Moves/Gallery");
        }
        catch (MoveException ex)
        {
            Snackbar.Add($"Błąd podczas dodawania figury: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UploadImages(InputFileChangeEventArgs e)
    {
        isLoading = true;

        try
        {
            move.Images = await imageService.UploadImagesAsync(e.GetMultipleFiles().ToList(), move.Name);

            foreach (var image in move.Images)
            {
                urlImages.Add(imageService.ImageBase64(image.ImageData));
            }
        }
        catch (ImageUploadException ex)
        {
            Snackbar.Add($"Błąd podczas przesyłania plików: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetDifficulty(int value) => move.DifficultyLevel = value;

    private void Cancel() => nav.NavigateTo("/Moves/Gallery");
}
