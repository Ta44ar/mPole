@page "/admin/users"

@inject IUserService userService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> userManager
@inject IDialogService DialogService
@inject IStringLocalizer<SharedResource> res

@if (isLoading) 
{
    <Loader />
}
else 
{
    @if (!users.Any()) 
    {
        <MudAlert Severity="MudBlazor.Severity.Info">@res["UsersNotFound"]</MudAlert>
    }
    else 
    {
        <MudItem xs="8">
            <MudTable Items="@users" Hover="true" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUser, object>(x => x.UserName)">@res["Email"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUser, object>(x => x.FirstName)">@res["FirstName"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUser, object>(x => x.LastName)">@res["LastName"]</MudTableSortLabel></MudTh>
                    <MudTh>@res["Roles"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@res["Email"]">@context.UserName</MudTd>
                    <MudTd DataLabel="@res["FirstName"]">@context.FirstName</MudTd>
                    <MudTd DataLabel="@res["LastName"]">@context.LastName</MudTd>
                    <MudTd DataLabel="@res["Roles"]">
                        <MudButton OnClick="() => OpenRoleManagementDialogAsync(context.UserName)" Variant="Variant.Outlined">
                            @res["Show"]
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10}" />
                </PagerContent>
            </MudTable>
        </MudItem>
    }
}

@code {
    private ICollection<ApplicationUser> users = new List<ApplicationUser>();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllUsersAsync();
        isLoading = false;
    }

    private async Task OpenRoleManagementDialogAsync(string email)
    {
        var parameters = new DialogParameters { ["Email"] = email };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };
        await DialogService.ShowAsync<ManageRolesDialog>("Zarządzaj rolami", parameters, options);
    }
}