@page "/Account/ResendEmailConfirmation"

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Resend email confirmation</PageTitle>

<EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard Style="width: 400px" Elevation="3">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Potwierdzanie adresu e-mail</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">Wprowadź adres e-mail przypisany do konta:</MudText>
                    <MudStaticTextField Label="E-mail" @bind-Value="Input.Email"
                                        For="@(() => Input.Email)" InputType="InputType.Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <br/>
                        <MudAlert Severity="@alertSeverity">@message</MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudStaticButton type="submit" Variant="Variant.Filled" Color="Color.Primary">Wyślij</MudStaticButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? message;
    private Severity alertSeverity = Severity.Info;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = "Nie istnieje użytkownik przypisany do tego adresu e-mail.";
            alertSeverity = Severity.Error;
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        alertSeverity = Severity.Success;
        message = "Wysłano wiadomość z potwierdzeniem adresu e-mail. Sprawdź swoją skrzynkę pocztową.";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Wprowadź adres e-mail")]
        [EmailAddress(ErrorMessage = "Niepoprawny adres e-mail")]
        public string Email { get; set; } = "";
    }
}

