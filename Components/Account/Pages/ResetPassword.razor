@page "/Account/ResetPassword"

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudGrid>
    <MudItem>
        <MudCard Style="width: 400px" Elevation="3">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Reset password</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">Reset your password.</MudText>
                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <MudAlert Severity="@alertSeverity">@statusMessage</MudAlert>
                }
                <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <input type="hidden" name="Input.Code" value="@Input.Code" />
                    <MudStaticTextField Label="Email" @bind-Value="Input.Email" For="@(() => Input.Email)" InputType="InputType.Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                    <MudStaticTextField Label="Password" @bind-Value="Input.Password" For="@(() => Input.Password)" InputType="InputType.Password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                    <MudStaticTextField Label="Confirm password" @bind-Value="Input.ConfirmPassword" For="@(() => Input.ConfirmPassword)" InputType="InputType.Password" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    <MudStaticButton type="submit" Variant="Variant.Filled" Color="Color.Primary">Reset</MudStaticButton>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private string? statusMessage;
    private Severity alertSeverity = Severity.Info;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            statusMessage = "Password reset link has been sent. Please check your email.";
            alertSeverity = Severity.Info;
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            statusMessage = "Your password has been reset.";
            alertSeverity = Severity.Success;
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
            return;
        }

        statusMessage = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
        alertSeverity = Severity.Error;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
