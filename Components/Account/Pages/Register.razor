@page "/Account/Register"

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Rejestracja</PageTitle>

<EditForm Model="registrationDto" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard Style="width: 400px" Elevation="3">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Rejestracja</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStaticTextField Label="Imię" @bind-Value="registrationDto.FirstName"
                                        For="@(() => registrationDto.FirstName)" />
                    <MudStaticTextField Label="Nazwisko" @bind-Value="registrationDto.LastName"
                                        For="@(() => registrationDto.LastName)" />
                    <MudStaticTextField Label="Adres e-mail" @bind-Value="registrationDto.Email"
                                        For="@(() => registrationDto.Email)" />
                    <MudStaticTextField Label="Hasło" @bind-Value="registrationDto.Password"
                                        For="@(() => registrationDto.Password)" InputType="InputType.Password" />
                    <MudStaticTextField Label="Powtórz hasło" @bind-Value="registrationDto.ConfirmPassword"
                                        For="@(() => registrationDto.ConfirmPassword)" InputType="InputType.Password" />
                    <br />
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="registrationDto.DateOfBirth" class="form-control" aria-required="true" />
                        <label for="dateofbirth">Birthdate</label>
                        <ValidationMessage For="() => registrationDto.DateOfBirth" class="text-danger" />
                    </div>
                    @if (identityErrors != null && identityErrors.Any())
                    {
                        <MudAlert Severity="Severity.Error">
                            @foreach (var error in identityErrors)
                            {
                                <div>@error.Description</div>
                            }
                        </MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudStaticButton type="submit" Variant="Variant.Filled" Color="Color.Primary">Zarejestruj się</MudStaticButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterUserDto registrationDto { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = await UserManager.FindByEmailAsync(registrationDto.Email!);
        if (user is not null)
        {
            identityErrors = new List<IdentityError> { new IdentityError { Description = "Użytkownik z tym adresem e-mail już istnieje." } };
            return;
        }

        user = CreateUser();

        user.FirstName = registrationDto.FirstName;
        user.LastName = registrationDto.LastName;
        user.DateOfBirth = registrationDto.DateOfBirth;

        await UserStore.SetUserNameAsync(user, registrationDto.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, registrationDto.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, registrationDto.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            Logger.LogError("User not created. E-mail is already taken.");
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, registrationDto.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = registrationDto.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
