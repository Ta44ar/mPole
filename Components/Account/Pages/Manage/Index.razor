@page "/Account/Manage"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager nav

<PageTitle>Profil użytkownika</PageTitle>

<StatusMessage />

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="pa-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="profileForm">
            <DataAnnotationsValidator />
            <MudCardHeader Class="justify-center">Profil użytkownika</MudCardHeader>
            <ValidationSummary class="text-danger" role="alert" />
            <MudStaticTextField @bind-Value="username" Label="Nazwa użytkownika" Disabled="true" Variant="Variant.Filled" />
            <MudStaticTextField @bind-Value="Input.PhoneNumber" Label="Numer telefonu" Variant="Variant.Filled" />
            <MudStaticButton type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 align-self-end">Zapisz</MudStaticButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Błąd: Nie udało się zapisać numeru telefonu.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone(ErrorMessage = "Wprowadzono nieprawidłowy numer telefonu")]
        [Display(Name = "Numer telefonu")]
        public string? PhoneNumber { get; set; }
    }
}