@page "/Account/Login"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<PageTitle>Logowanie</PageTitle>

<StatusMessage Message="@errorMessage" />

<EditForm Model="loginDto" asp-route-returnUrl="@ReturnUrl"  method="post" OnValidSubmit="LoginUser" FormName="login">
<DataAnnotationsValidator />
<MudGrid>
    <MudItem>
        <MudCard Style="width: 400px" Elevation="3">
            <MudCardHeader Class="">
                <MudText Typo="Typo.h5">Logowanie</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudStaticTextField Label="Adres e-mail" @bind-Value="loginDto.Email" 
                                    For="@(() => loginDto.Email)"/>
                <MudStaticTextField Label="Hasło" @bind-Value="loginDto.Password" 
                                    For="@(() => loginDto.Password)" InputType="InputType.Password"/>
                <MudStaticCheckBox Label="Zapamiętaj mnie" @bind-Value="loginDto.RememberMe" />
                <MudCardActions>
                    <MudStaticButton type="submit" Variant="Variant.Filled" Color="Color.Primary">Zaloguj się</MudStaticButton>
                </MudCardActions>
                <MudText>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </MudText>
                <MudText>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </MudText>
                <MudText>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginDto loginDto { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(loginDto.Email, loginDto.Password, loginDto.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = loginDto.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
}
