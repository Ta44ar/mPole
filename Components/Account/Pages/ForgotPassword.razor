@page "/Account/ForgotPassword"

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResource> res

<PageTitle>@res["PasswordReset"]</PageTitle>

<EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard Style="width: 400px" Elevation="3">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@res["ForgotPasswordQuestion"]</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">@res["EnterEmailAssignedToAccount"]</MudText>
                    <MudStaticTextField Label="@res["Email"]" @bind-Value="Input.Email"
                                        For="@(() => Input.Email)" InputType="InputType.Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <br />
                        <MudAlert Severity="Severity.Success">@statusMessage</MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudStaticButton type="submit" Variant="Variant.Filled" Color="Color.Primary">@res["ResetPassword"]</MudStaticButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? statusMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            statusMessage = res["PasswordResetLinkSentMessage"];
            return;
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        statusMessage = res["PasswordResetLinkSentMessage"];
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
