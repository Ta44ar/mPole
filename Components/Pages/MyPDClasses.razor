@page "/classes/{userId}"

@inject IUserService userService
@inject IClassService classService
@inject IRegistrationService registrationService
@inject IStringLocalizer<SharedResource> res
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager nav
@inject IDialogService DialogService

@if (isLoading)
{
    <Loader />
}
else
{
    <AuthorizeView>
        <Authorized>
            <MudGrid>
                <MudItem xs="8">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5" Style="margin-bottom: 20px;">@res["AttendantClasses"]</MudText>
                            <MudTable Items="@userClasses" Hover="true" SortLabel="Sort By" Height="200px">
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Training.Name)">@res["Name"]</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Date ?? DateTime.MinValue)">@res["Date"]</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Location)">@res["Location"]</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Trainer.LastName)">@res["Trainer"]</MudTableSortLabel></MudTh>
                                    <MudTh>@res["Actions"]</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="userClass">
                                    <MudTd DataLabel="@res["Name"]">@userClass.Training.Name</MudTd>
                                    <MudTd DataLabel="@res["Date"]">@userClass.Date?.ToString("dd.MM.yyyy HH:mm")</MudTd>
                                    <MudTd DataLabel="@res["Location"]">@userClass.Location</MudTd>
                                    <MudTd DataLabel="@res["Trainer"]">@userClass.Trainer.FirstName @userClass.Trainer.LastName</MudTd>
                                    <MudTd DataLabel="@res["Actions"]">
                                        <MudTooltip Text="@res["Details"]">
                                            <MudIconButton Icon="@Icons.Material.Filled.Info" OnClick="() => ShowClassDetails(userClass)" />
                                        </MudTooltip>
                                        <MudTooltip Text="@res["Attendants"]">
                                            <MudIconButton Icon="@Icons.Material.Filled.People" OnClick="() => ViewAttendants(userClass)" />
                                        </MudTooltip>
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText Typo="Typo.body1">@res["UserNoClassesFound"]</MudText>
                                    <MudLink Href="/classes">@res["ClassSignIn"]</MudLink>
                                </NoRecordsContent>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 50}" />
                                </PagerContent>
                            </MudTable>
                        </MudItem>

                        @if (isInstructor)
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.h5" Style="margin-bottom: 20px;">@res["InstructorClasses"]</MudText>
                                <MudTable Items="@instructorClasses" Hover="true" SortLabel="Sort By" Height="200px">
                                    <HeaderContent>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Training.Name)">@res["Name"]</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Date ?? DateTime.MinValue)">@res["Date"]</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Location)">@res["Location"]</MudTableSortLabel></MudTh>
                                        <MudTh></MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="instructorClass">
                                        <MudTd DataLabel="@res["Name"]">@instructorClass.Training.Name</MudTd>
                                        <MudTd DataLabel="@res["Date"]">@instructorClass.Date?.ToString("dd.MM.yyyy HH:mm")</MudTd>
                                        <MudTd DataLabel="@res["Location"]">@instructorClass.Location</MudTd>
                                        <MudTd DataLabel="@res["Actions"]" Class="d-flex justify-end">
                                            <MudTooltip Text="@res["Edit"]">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditClass(instructorClass)" />
                                            </MudTooltip>
                                            <MudTooltip Text="@res["Delete"]">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteClass(instructorClass.Id)" />
                                            </MudTooltip>
                                            <MudTooltip Text="@res["Attendants"]">
                                                <MudIconButton Icon="@Icons.Material.Filled.People" OnClick="() => ViewAttendants(instructorClass)" />
                                            </MudTooltip>
                                            <MudTooltip Text="@res["Details"]">
                                                <MudIconButton Icon="@Icons.Material.Filled.Info" OnClick="() => ShowClassDetails(instructorClass)" />
                                            </MudTooltip>
                                        </MudTd>
                                    </RowTemplate>
                                    <NoRecordsContent>
                                        <MudItem>
                                            <MudText Typo="Typo.body1">@res["InstructorNoClassesFound"]</MudText>
                                            <MudLink Href="/instructor/training-plans">@res["OrganiseClass"]</MudLink>
                                        </MudItem>
                                    </NoRecordsContent>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 50}" />
                                    </PagerContent>
                                </MudTable>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
                <MudItem xs="4">
                    <MudCardMedia Height="600" Image="/images/classesPictureBlack.png"></MudCardMedia>
                </MudItem>
            </MudGrid>
        </Authorized>
        <NotAuthorized>
            <MudGrid>
                <MudItem xs="12">
                    <PleaseLogInView ReturnUrl="@nav.Uri" />
                </MudItem>
            </MudGrid>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [CascadingParameter]
    public MainLayout? MainLayout { get; set; } = default!;

    [Parameter]
    public string? userId { get; set; }

    private bool isLoading = true;
    private bool isInstructor = false;
    private ICollection<Class> userClasses = new List<Class>();
    private ICollection<Class> instructorClasses = new List<Class>();

    protected override async Task OnInitializedAsync()
    {
        var user = await userService.GetCurrentUserAsync();

        if (user != null)
        {
            isInstructor = await userManager.IsInRoleAsync(user, "Instructor");

            userClasses = await registrationService.GetClassesByUserIdAsync(user.Id, RegistrationStatus.Confirmed);

            if (isInstructor)
            {
                instructorClasses = await userService.GetClassesByInstructorAsync(user.Id);
            }

            isLoading = false;
        }

        isLoading = false;
    }

    private void ViewAttendants(Class classModel)
    {

    }

    private void EditClass(Class classModel)
    {
        var parameters = new DialogParameters
        {
            { "Training", classModel.Training },
            { "User", classModel.Trainer },
            { "classModel", classModel }
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        DialogService.Show<PDClassOrganiseDialog>(res["EditClass"], parameters, options);
    }

    private async Task DeleteClass(int classId)
    {
        bool? result = await DialogService.ShowMessageBox(
            res["Warning"],
            res["WarningClassDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            try
            {
                await classService.DeleteClassAsync(classId, CancellationToken.None);
                Snackbar.Add(res["SuccessClassDeletion"], MudBlazor.Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add(res["ErrorDuringClassDeletion"] + $": {ex.Message}", MudBlazor.Severity.Error);
            }
        }

        await OnInitializedAsync();
    }

    private void ShowClassDetails(Class classModel)
    {
        var parameters = new DialogParameters
        {
            { "Class", classModel },
            { "MainLayout", MainLayout }
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        DialogService.Show<PDClassViewDialog>(res["ClassDetails"], parameters, options);
    }
}