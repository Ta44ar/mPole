@page "/classes/{userId}"

@inject IUserService userService
@inject IClassService classService
@inject IStringLocalizer<SharedResource> res
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager nav
@inject IDialogService DialogService

@if (isLoading)
{
    <Loader />
}
else
{
    <AuthorizeView>
        <Authorized>
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">@res["AttendantClasses"]</MudText>
                    <MudTable Items="@userClasses" Hover="true" SortLabel="Sort By">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Training.Name)">@res["Name"]</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Date ?? DateTime.MinValue)">@res["Date"]</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Location)">@res["Location"]</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Trainer.LastName)">@res["Trainer"]</MudTableSortLabel></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="userClass">
                            <MudTd DataLabel="@res["Name"]">@userClass.Training.Name</MudTd>
                            <MudTd DataLabel="@res["Date"]">@userClass.Date?.ToString("d")</MudTd>
                            <MudTd DataLabel="@res["Location"]">@userClass.Location</MudTd>
                            <MudTd DataLabel="@res["Trainer"]">@userClass.Trainer.FirstName @userClass.Trainer.LastName</MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body1">@res["UserNoClassesFound"]</MudText>
                            <MudLink Href="/classes">@res["ClassSignIn"]</MudLink>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 50}" />
                        </PagerContent>
                    </MudTable>
                </MudItem>

                @if (isInstructor)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5">@res["InstructorClasses"]</MudText>
                        <MudTable Items="@instructorClasses" Hover="true" SortLabel="Sort By">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Training.Name)">@res["Name"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Date ?? DateTime.MinValue)">@res["Date"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Class, object>(x => x.Location)">@res["Location"]</MudTableSortLabel></MudTh>
                                <MudTh>@res["Actions"]</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="instructorClass">
                                <MudTd DataLabel="@res["Name"]">@instructorClass.Training.Name</MudTd>
                                <MudTd DataLabel="@res["Date"]">@instructorClass.Date?.ToString("d")</MudTd>
                                <MudTd DataLabel="@res["Location"]">@instructorClass.Location</MudTd>
                                <MudTd DataLabel="@res["Actions"]">
                                    <MudButton Color="Color.Primary" OnClick="() => EditClass(instructorClass)">@res["Edit"]</MudButton>
                                    <MudButton Color="Color.Error" OnClick="() => DeleteClass(instructorClass.Id)">@res["Delete"]</MudButton>
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <MudItem>
                                    <MudText Typo="Typo.body1">@res["InstructorNoClassesFound"]</MudText>
                                    <MudLink Href="/instructor/training-plans">@res["OrganiseClass"]</MudLink>
                                </MudItem>
                            </NoRecordsContent>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 5, 10, 50}" />
                            </PagerContent>
                        </MudTable>
                    </MudItem>
                }
            </MudGrid>
        </Authorized>
        <NotAuthorized>
            <MudGrid>
                <MudItem xs="12">
                    <PleaseLogInView ReturnUrl="@nav.Uri" />
                </MudItem>
            </MudGrid>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string? userId { get; set; }

    private bool isLoading = true;
    private bool isInstructor = false;
    private ICollection<Class> userClasses = new List<Class>();
    private ICollection<Class> instructorClasses = new List<Class>();

    protected override async Task OnInitializedAsync()
    {
        var user = await userService.GetCurrentUserAsync();

        if (user != null)
        {
            isInstructor = await userManager.IsInRoleAsync(user, "Instructor");

            userClasses = await userService.GetClassesByUserAsync(userId);

            if (isInstructor)
            {
                instructorClasses = await userService.GetClassesByInstructorAsync(userId);
            }

            isLoading = false;
        }

        isLoading = false;
    }

    private void EditClass(Class classModel)
    {
        var parameters = new DialogParameters
        {
            { "Training", classModel.Training },
            { "User", classModel.Trainer },
            { "classModel", classModel }
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        DialogService.Show<PDClassOrganiseDialog>(res["EditClass"], parameters, options);
    }

    private async Task DeleteClass(int classId)
    {
        bool? result = await DialogService.ShowMessageBox(
            res["Warning"],
            res["WarningClassDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            try
            {
                await classService.DeleteClassAsync(classId, CancellationToken.None);
                Snackbar.Add(res["SuccessClassDeletion"], MudBlazor.Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add(res["ErrorDuringClassDeletion"] + $": {ex.Message}", MudBlazor.Severity.Error);
            }
        }

        StateHasChanged();
    }
}