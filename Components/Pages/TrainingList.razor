@page "/admin/trainings"
@inject ITrainingService trainingService

<PageTitle>Plany zajęć</PageTitle>

@if (isLoading)
{
    <Loader/>
}
else
{
    <MudButton @onclick="NavigateToAdd" Variant="Variant.Filled" Color="Color.Primary" Style="margin-bottom: 2rem">
        Dodaj trening
    </MudButton>

    if (trainings.Count == 0)
    {
        <MudText Typo="Typo.h6">Brak dostępnych treningów.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var training in paginatedTrainings)
            {
                <MudItem xs="12">
                    <MudCard>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudCardMedia Image="@training.ImageUrl" Width="100%" />
                            </MudItem>
                            <MudItem xs="8">
                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@training.Name</MudText>
                                    <MudText Typo="Typo.subtitle1">Trener: @training.Trainer</MudText>
                                    <MudText Typo="Typo.subtitle2">Typ: @training.Type</MudText>
                                    <MudText Typo="Typo.subtitle2">Data: @training.Date.ToString("dd-MM-yyyy")</MudText>
                                    <MudText Typo="Typo.body1">@training.Description</MudText>
                                </MudCardContent>
                              </MudItem>
                        </MudGrid>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <MudPagination Count="@pagesCount" SelectedChanged="OnPageChanged" Class="d-flex align-center" Style="margin-top: 2rem" />
    }
}

@code {
    private List<Training> trainings = new();
    private List<Training> paginatedTrainings = new();
    private bool isLoading = true;
    private int pageSize = 2;
    private int pageIndex = 1;
    private int totalItems;
    private int pagesCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trainings = await trainingService.GetTrainingsAsync();
            totalItems = trainings.Count;
            pagesCount = (int)Math.Ceiling((double)totalItems / pageSize);
            UpdatePaginatedTrainings();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnPageChanged(int pageIndex)
    {
        this.pageIndex = pageIndex;
        UpdatePaginatedTrainings();
    }

    private void UpdatePaginatedTrainings()
    {
        int startIndex = (pageIndex - 1) * pageSize;
        paginatedTrainings = trainings.Skip(startIndex).Take(pageSize).ToList();
        StateHasChanged();
    }
    private void NavigateToAdd()
    {
    }
}

