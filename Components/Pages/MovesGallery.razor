@page "/Moves/Gallery"

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IMoveService moveService

<PageTitle>Galeria Figur</PageTitle>

@if (isLoading)
{
    <Loader></Loader>
}
else
{
    <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
        Dodaj figurę
    </MudButton>
    <MudGrid>
        @foreach (var move in poledanceMoves)
        {
            <MudItem>
                <MudCard @onclick="() => NavigateToMoveDetails(move.Id)" Style="cursor: pointer;">
                    <MudCardMedia Image="@move.ImageUrl">
                    </MudCardMedia>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@move.Name</MudText>
                        <MudText Typo="Typo.body2">Poziom trudności: @move.DifficultyLevel</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private List<MoveCardDto> poledanceMoves = new List<MoveCardDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await ReloadMovesAsync();
    }

    private async Task ReloadMovesAsync()
    {
        isLoading = true;
        try
        {
            poledanceMoves = await moveService.GetMovesAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., log it, show a message to the user, etc.)
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }

        if (poledanceMoves.Count == 0)
        {
            string imageUrl = "https://dekochatka.pl/wp-content/uploads/2020/10/4937.jpg";
            poledanceMoves = new List<MoveCardDto>()
            {
                new MoveCardDto
                {
                    Id = 2,
                    Name = "Figura 1",
                    DifficultyLevel = 2,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 3,
                    Name = "Figura 2",
                    DifficultyLevel = 1,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 4,
                    Name = "Figura 3",
                    DifficultyLevel = 1,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 5,
                    Name = "Figura 4",
                    DifficultyLevel = 3,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 6,
                    Name = "Figura 5",
                    DifficultyLevel = 2,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 7,
                    Name = "Figura 6",
                    DifficultyLevel = 3,
                    ImageUrl = imageUrl
                }
            };
        }
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["OnMoveAdded"] = EventCallback.Factory.Create(this, ReloadMovesAsync) };
        var dialog = DialogService.Show<AddFigureWindow>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
    }

    private void NavigateToMoveDetails(int moveId)
    {
        Navigation.NavigateTo($"/Moves/Details/{moveId}");
    }
}
