@page "/moves/gallery"

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager nav
@inject IMoveService moveService
@inject IStringLocalizer<SharedResource> res

<PageTitle>@res["MovesGallery"]</PageTitle>

@if (isLoading)
{
    <Loader></Loader>
}
else
{
    if (MainLayout.isAdmin)
    {
        <MudButton @onclick="NavigateToAdd" Variant="Variant.Filled" Style="margin-bottom: 2rem">
            @res["MoveAdd"]
        </MudButton>
    }

    <MudGrid>
        @foreach (var move in paginatedMoves)
        {
            <MudItem xs="3">
                <MudCard @onclick="() => NavigateToMoveDetails(move.Id)">
                    <MudCardMedia Image="@move.ImageUrl"  >
                    </MudCardMedia>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@move.Name</MudText>
                        <MudRating SelectedValue="@move.DifficultyLevel" Disabled="true"/>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <MudPagination Count="@pagesCount" SelectedChanged="OnPageChanged" Class="d-flex align-center" Style="margin-top: 2rem" />
}

@code {
    [CascadingParameter]
    public required MainLayout MainLayout { get; set; }

    private IList<MoveCardDto> poledanceMoves = new List<MoveCardDto>();
    private IList<MoveCardDto> paginatedMoves = new List<MoveCardDto>();
    private bool isLoading = true;
    private int pageSize = 8;
    private int pageIndex = 1;
    private int totalItems;
    private int pagesCount;

    protected override async Task OnInitializedAsync()
    {
        await ReloadMovesAsync();
    }

    private async Task ReloadMovesAsync()
    {
        isLoading = true;
        try
        {
            poledanceMoves = await moveService.GetMovesAsync();
            totalItems = poledanceMoves.Count;
            pagesCount = (int)Math.Ceiling((double)totalItems / pageSize);
            UpdatePaginatedMoves();
        }
        catch (MoveException ex)
        {
            // Handle the exception (e.g., log it, show a message to the user, etc.)
            Snackbar.Add(res["ErrorOcurredMessage"] + $": {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }

        if (poledanceMoves.Count == 0)
        {
            string imageUrl = "https://dekochatka.pl/wp-content/uploads/2020/10/4937.jpg";
            poledanceMoves = new List<MoveCardDto>()
            {
                new MoveCardDto
                {
                    Id = 2,
                    Name = "Figura 1",
                    DifficultyLevel = 2,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 3,
                    Name = "Figura 2",
                    DifficultyLevel = 1,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 4,
                    Name = "Figura 3",
                    DifficultyLevel = 1,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 5,
                    Name = "Figura 4",
                    DifficultyLevel = 3,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 6,
                    Name = "Figura 5",
                    DifficultyLevel = 2,
                    ImageUrl = imageUrl
                },
                new MoveCardDto
                {
                    Id = 7,
                    Name = "Figura 6",
                    DifficultyLevel = 3,
                    ImageUrl = imageUrl
                }
            };
        }
    }

    private void OnPageChanged(int pageIndex)
    {
        this.pageIndex = pageIndex;
        UpdatePaginatedMoves();
    }

    private void UpdatePaginatedMoves()
    {
        int startIndex = (pageIndex - 1) * pageSize;
        paginatedMoves = poledanceMoves.Skip(startIndex).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void NavigateToAdd() => nav.NavigateTo("/moves/add");
    private void NavigateToMoveDetails(int moveId) => nav.NavigateTo($"/moves/details/{moveId}");
}
