@inject ISnackbar Snackbar
@inject MoveService moveService

<MudDialog>
    <TitleContent>
        Dodaj nową figurę
    </TitleContent>
    <DialogContent>
        <EditForm Model="newMove" OnValidSubmit="HandleValidSubmit">
            <MudTextField @bind-Value="newMove.Name" Label="Nazwa" Required="true" />
            <MudTextField @bind-Value="newMove.Description" Label="Opis"
                    Lines="5"/>
            <MudNumericField @bind-Value="newMove.DifficultyLevel" Label="Poziom trudności" Required="true"
                                Min="1" Max="3"/>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback OnMoveAdded { get; set; }

    private Move newMove = new Move();

    private async Task HandleValidSubmit()
    {
        try
        {
            await moveService.AddNewMove(newMove, CancellationToken.None);
            Snackbar.Add("Pomyślnie dodano nową figurę!", Severity.Success);
            await OnMoveAdded.InvokeAsync();
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd: {ex.Message}", Severity.Error);
        }
    }

    private void Submit() => HandleValidSubmit();

    private void Cancel() => MudDialog.Cancel();
}
