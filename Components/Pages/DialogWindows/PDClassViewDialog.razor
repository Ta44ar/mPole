@inject IStringLocalizer<SharedResource> res
@inject IDialogService dialogService
@inject ITrainingService trainingService
@inject IClassService classService
@inject ISnackbar snackbar

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true">
    <DialogContent>
        <MudPaper Elevation="4" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h4" Color="Color.Primary">@Class.Training.Name</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@Class.Date?.ToString()</MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="text-right d-flex justify-end">
                    @if (!string.IsNullOrEmpty(Class.Training.ImageUrl))
                    {
                        <MudAvatar Size="Size.Large" Image="@Class.Training.ImageUrl" />
                    }
                    else
                    {
                        <MudAvatar Size="Size.Large" Icon="@Icons.Material.Filled.FitnessCenter" />
                    }
                </MudItem>
            </MudGrid>
            <MudDivider Class="my-2" />
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Place" /> @res["Location"]: <b>@Class.Location</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Person" /> @res["Trainer"]: <b>@Class.Trainer.FirstName @Class.Trainer.LastName</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Schedule" /> @res["Duration"]: <b>@Class.Duration</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Group" /> @res["UsersRegistered"]: <b>@Class.RegisteredUsers.Count</b></MudText>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if (IsInstructor)
        {
            <MudButton OnClick="DeleteClass" Variant="Variant.Filled">@res["Delete"]</MudButton>
            <MudButton OnClick="EditClass" Color="Color.Secondary" Variant="Variant.Filled">@res["ClassEdition"]</MudButton>
        }
        <MudButton OnClick="Close" Color="Color.Primary" Variant="Variant.Filled">@res["OK"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public MainLayout? MainLayout { get; set; } = default!;

    [Parameter]
    public Class Class { get; set; } = default!;

    [Parameter]
    public EventCallback OnClassEdited { get; set; }

    [Parameter]
    public EventCallback OnClassDeleted { get; set; }

    private bool IsInstructor { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsInstructor = MainLayout.isInstructor;
    }

    private void Close() => MudDialog.Close();

    private async Task EditClass()
    {
        var training = await trainingService.GetTrainingAsync(Class.TrainingId);
        var parameters = new DialogParameters { ["classModel"] = Class, ["Training"] = training, ["User"] = MainLayout.user };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var dialog = dialogService.Show<PDClassOrganiseDialog>(res["ClassEdition"], parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnClassEdited.InvokeAsync();
        }
    }

    private async Task DeleteClass()
    {
        bool? result = await dialogService.ShowMessageBox(
            res["Warning"],
            res["WarningClassDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            try
            {
                await classService.DeleteClassAsync(Class.Id, CancellationToken.None);
                snackbar.Add(res["SuccessClassDeletion"], MudBlazor.Severity.Success);
                await OnClassDeleted.InvokeAsync();
                MudDialog.Close();
            }
            catch (Exception ex)
            {
                snackbar.Add(res["ErrorDuringClassDeletion"] + $": {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }
}