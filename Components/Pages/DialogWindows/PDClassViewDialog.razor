@inject IStringLocalizer<SharedResource> res
@inject IDialogService dialogService
@inject ITrainingService trainingService
@inject IClassService classService
@inject IRegistrationService registrationService
@inject ISnackbar snackbar

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true">
    <DialogContent>
        <MudPaper Elevation="4" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h4" Color="Color.Primary">@Class.Training.Name</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@Class.DateTime?.ToString("dd-MM-yyyy HH:mm")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="text-right d-flex justify-end">
                    <MudAvatar Size="Size.Large">
                        <MudImage Src="@Class.Training.ImageUrl"/>             
                    </MudAvatar>
                </MudItem>
            </MudGrid>
            <MudDivider Class="my-2" />
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Place" /> @res["Location"]: <b>@Class.Location</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Person" /> @res["Trainer"]: <b>@Class.Trainer.FirstName @Class.Trainer.LastName</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Schedule" /> @res["Duration"]: <b>@($"{Class.Duration.Hours}h {Class.Duration.Minutes}m")</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Group" /> @res["UsersRegistered"]: <b>@Class.Registrations.Count</b></MudText>
            <MudText Class="d-flex gap-2 align-items-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.EventAvailable" /> @res["IsRegistrationOpen"] <b>@(Class.IsRegistrationOpen ? res["Yes"] : res["No"])</b></MudText>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if (UserRegisteredAlready)
        {
            <MudButton OnClick="ResignFromClass" Variant="Variant.Filled">@res["ClassResign"]</MudButton>
        }
        else
        {
            <MudButton OnClick="SignInForClass" Variant="Variant.Filled">@res["ClassSignIn"]</MudButton>
        }

        @if (IsInstructor)
        {
            <MudButton OnClick="DeleteClass" Variant="Variant.Filled">@res["Delete"]</MudButton>
            <MudButton OnClick="EditClass" Color="Color.Secondary" Variant="Variant.Filled">@res["ClassEdition"]</MudButton>
        }
        <MudButton OnClick="Close" Color="Color.Primary" Variant="Variant.Filled">@res["OK"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public MainLayout? MainLayout { get; set; } = default!;

    [Parameter]
    public Class Class { get; set; } = default!;

    [Parameter]
    public EventCallback OnClassEdited { get; set; }

    [Parameter]
    public EventCallback OnClassDeleted { get; set; }

    private bool IsInstructor { get; set; } = false;
    private bool UserRegisteredAlready = false;

    private ICollection<ApplicationUser> participants = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        IsInstructor = MainLayout.isInstructor;
        await LoadClassData();
    }

    private async Task LoadClassData()
    {
        participants = await registrationService.GetRegisteredUsersByClassIdAsync(Class.Id);
        Class.Registrations = await registrationService.GetRegistrationsByClassIdAsync(Class.Id);
        UserRegisteredAlready = await registrationService.IsUserRegisteredAlready(MainLayout.userId, Class.Id);
        StateHasChanged();
    }

    private void Close() => MudDialog.Close();

    private async Task EditClass()
    {
        var training = await trainingService.GetTrainingAsync(Class.TrainingId);
        var parameters = new DialogParameters
            {
                ["classModel"] = Class,
                ["Training"] = training,
                ["User"] = MainLayout.user,
                ["Participants"] = participants
            };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var dialog = dialogService.Show<PDClassOrganiseDialog>(res["ClassEdition"], parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnClassEdited.InvokeAsync();
            await LoadClassData();
        }
    }

    private async Task DeleteClass()
    {
        bool? result = await dialogService.ShowMessageBox(
            res["Warning"],
            res["WarningClassDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            try
            {
                await classService.DeleteClassAsync(Class.Id, CancellationToken.None);
                snackbar.Add(res["SuccessClassDeletion"], MudBlazor.Severity.Success);
                await OnClassDeleted.InvokeAsync();
                MudDialog.Close();

                await OnClassEdited.InvokeAsync();
                await LoadClassData();
            }
            catch (Exception ex)
            {
                snackbar.Add(res["ErrorDuringClassDeletion"] + $": {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }

    private async Task SignInForClass()
    {
        var registration = new RegisterForClassDto
            {
                ClassId = Class.Id,
                UserId = MainLayout.user.Id,

                //FOR NOW - no confirmation required
                Status = RegistrationStatus.Confirmed
            };
        try
        {
            await registrationService.RegisterForClassAsync(registration, CancellationToken.None);
            snackbar.Add(res["SuccessClassSignIn"], MudBlazor.Severity.Success);
            await OnClassEdited.InvokeAsync();
            await LoadClassData();
        }
        catch (Exception ex)
        {
            snackbar.Add(res["ErrorDuringClassSignIn"] + $": {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private async Task ResignFromClass()
    {
        try
        {
            await registrationService.ResignFromClassAsync(MainLayout.user.Id, Class.Id, CancellationToken.None);
            snackbar.Add(res["SuccessClassResign"], MudBlazor.Severity.Success);
            await OnClassEdited.InvokeAsync();
            await LoadClassData();
        }
        catch (Exception ex)
        {
            snackbar.Add(res["ErrorDuringClassResign"] + $": {ex.Message}", MudBlazor.Severity.Error);
        }
    }
}