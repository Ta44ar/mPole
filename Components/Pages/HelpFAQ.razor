@page "/help"

@inject NavigationManager Navigation

<PageTitle>@Res["HelpFAQ"]</PageTitle>

<MudText Typo="Typo.h4" Class="d-flex justify-center mb-4">@Res["HelpFAQ"]</MudText>

<MudContainer MaxWidth="MaxWidth.Large" Class="mb-6">
    <MudPaper Class="pa-4">
        <MudExpansionPanels>
            <MudExpansionPanel Text="@Res["Question1"]" Style="font-weight: bold;">
                <MudText Typo="Typo.body1">@Res["Answer1"]</MudText>
            </MudExpansionPanel>
            <MudExpansionPanel Text="@Res["Question2"]" Style="font-weight: bold;">
                <MudText Typo="Typo.body1">@Res["Answer2"]</MudText>
            </MudExpansionPanel>
            <MudExpansionPanel Text="@Res["Question3"]" Style="font-weight: bold;">
                <MudText Typo="Typo.body1">@Res["Answer3"]</MudText>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <h2>@Res["HaveAQuestion"]</h2>
        <EditForm Model="questionModel" OnValidSubmit="SubmitQuestion">
            <DataAnnotationsValidator />
            <MudTextField Disabled="@MainLayout.isAuthenticated" @bind-Value="questionModel.Email" Label="@Res["Email"]" Required="true" />
            <MudTextField @bind-Value="questionModel.Question" Label="@Res["Question"]" Lines="5" Required="true" />
            <MudToolBar Class="d-flex justify-end">
                <MudButton OnClick="SubmitQuestion" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">@Res["Send"]</MudButton>
            </MudToolBar>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    public QuestionModel questionModel = new();
    public QuestionValidator? questionValidator;

    [Inject]
    public IStringLocalizer<SharedResource> Res { get; set; }

    [Inject]
    public ISnackbar Snackbar { get; set; }

    [Inject]
    public IEmailService EmailService { get; set; }

    protected override void OnInitialized()
    {
        if (MainLayout.isAuthenticated)
        {
            questionModel.Email = MainLayout.userName;
        }
    }

    public async Task SubmitQuestion()
    {
        if (!await CustomValidators.ValidateAndShowErrors(new QuestionValidator(Res), questionModel, Snackbar))
        {
            return;
        }

        await SendEmailAsync();
        questionModel = new QuestionModel();

        // Handle the question submission logic here TO DO
        await Task.CompletedTask;
    }

    public async Task SendEmailAsync()
    {
        try
        {
            await EmailService.SendTemplatedEmailAsync(Res["EmailNewQuestion"], questionModel.Question, MainLayout.userName);
            Snackbar.Add(Res["SuccessEmailSend"], MudBlazor.Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Res["ErrorDuringEmailSend"]}: {ex.Message}", MudBlazor.Severity.Error);
        }
    }
}