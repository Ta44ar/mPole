@page "/Moves/Details/{moveId:int}"

@inject ISnackbar Snackbar
@inject NavigationManager nav
@inject IImageService imageService
@inject IMoveService moveService
@inject IDialogService DialogService

<PageTitle>Move Details</PageTitle>

@if (isLoading)
{
    <Loader />
}
else
{
    <MudPaper Height="100vh" Width="100vw">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCarousel Class="mud-width-full" Style="height:100vh;" ShowArrows="@arrows" AutoCycle="@autocycle" TData="string">
                    @if (move?.ImageUrls != null)
                    {
                        @foreach (var imageUrl in move.ImageUrls)
                        {
                            <MudCarouselItem>
                                <MudCardMedia Image="@imageUrl" Style="height:100vh;" />
                            </MudCarouselItem>
                        }
                    }
                </MudCarousel>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@move?.Name</MudText>
                        <MudText Typo="Typo.body1">Poziom trudności: @move?.DifficultyLevel</MudText>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudText Typo="Typo.body2">@move?.Description</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="EditMove" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnButtonClicked" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <style>
        .full-size {
            width: 100%;
            height: 100%;
        }
    </style>
}

@code {
    [Parameter]
    public int moveId { get; set; }

    private MoveDetailsDto? move;
    private bool arrows = true;
    private bool autocycle = true;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            move = await moveService.GetMoveAsync(moveId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditMove() => nav.NavigateTo($"/Moves/Edit/{moveId}");

    private async Task DeleteMove()
    {
        try
        {
            await moveService.DeleteMoveAsync(moveId, CancellationToken.None);
            Snackbar.Add("Pomyślnie usunięto figurę!", Severity.Success);
            nav.NavigateTo("/Moves/Gallery");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas usuwania figury: {ex.Message}", Severity.Error);
        }
    }

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Uwaga",
            "Usunięcie figury będzie nieodwracalne.",
            yesText: "Usuń", cancelText: "Anuluj");
        if (result == true)
        {
            await DeleteMove();
        }
        StateHasChanged();
    }
}