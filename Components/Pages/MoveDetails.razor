@page "/moves/details/{moveId:int}"

@inject ISnackbar Snackbar
@inject NavigationManager nav
@inject IImageService imageService
@inject IMoveService moveService
@inject IDialogService DialogService
@inject IStringLocalizer<SharedResource> res
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@pageTitle</PageTitle>

@if (isLoading)
{
    <Loader />
}
else
{
    <MudGrid Style="height:100%; width: 100%;">
        <MudItem xs="12" sm="4">
            <MudCarousel  Style="height:600px; width: 100%; border-radius: 4px;" EnableSwipeGesture="true" ShowArrows="true" AutoCycle="true" TData="string">
                @if (moveImageUrls != null)
                {
                    @foreach (var imageUrl in moveImageUrls)
                    {
                        <MudCarouselItem>
                            <MudCardMedia Height="600" Image="@imageUrl"  />
                        </MudCarouselItem>
                    }
                }
            </MudCarousel>
        </MudItem>
        <MudItem xs="12" sm="8">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="8">
                            <MudText Typo="Typo.h4">@move?.Name</MudText>
                            <MudText Typo="Typo.body1">@res["DifficultyLevel"]: @move?.DifficultyLevel</MudText>

                        </MudItem>
                        <MudItem xs="12" sm="4" Class="d-flex justify-end">
                            @if (isAdmin)
                            {
                                <MudCardActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="EditMove" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnButtonClicked" />
                                </MudCardActions>
                            }
                        </MudItem>
                    </MudGrid>
                    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                    <MudText Typo="Typo.body2">@move?.Description</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int moveId { get; set; }

    private Move? move;
    private ICollection<string> moveImageUrls = new List<string>();
    private bool isLoading = true;
    private bool isAdmin = false;
    private string pageTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            move = await moveService.GetMoveAsync(moveId);
            pageTitle = move?.Name ?? res["MoveDetails"];

            foreach (var image in move.Images)
            {
                string base64Image = image.GetBase64ImageData(imageService);
                moveImageUrls.Add(base64Image);
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var authResult = await AuthorizationService.AuthorizeAsync(user, "AdminOnly");
            isAdmin = authResult.Succeeded;
        }
        catch (MoveException ex)
        {
            Snackbar.Add($"Błąd: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditMove() => nav.NavigateTo($"/moves/edit/{moveId}");

    private async Task DeleteMove()
    {
        try
        {
            await moveService.DeleteMoveAsync(moveId, CancellationToken.None);
            Snackbar.Add(res["SuccessMoveDeletionMessage"] + $" {move.Name}", Severity.Success);
            nav.NavigateTo("/moves/gallery");
        }
        catch (MoveException ex)
        {
            Snackbar.Add(res["ErrorDuringMoveDeletion"] + $": {ex.Message}", Severity.Error);
        }
    }

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            res["Warning"],
            res["WarningMoveDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            await DeleteMove();
        }

        StateHasChanged();
    }
}