@page "/classes"

@inject IStringLocalizer<SharedResource> res
@inject IClassService classService
@inject IDialogService dialogService
@inject NavigationManager nav

<PageTitle>@res["Classes"]</PageTitle>

<AuthorizeView>
    <Authorized>
        <Calendar Events="_events" OnDateRangeChanged="OnDateRangeChangedAsync" OnItemClicked="OnItemClickedAsync" />
    </Authorized>
    <NotAuthorized>
        <PleaseLogInView ReturnUrl="@nav.Uri" />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public MainLayout? mainLayout { get; set; }

    private bool isLoading = true;

    public ICollection<Event> _events = new List<Event>();

    private async Task OnDateRangeChangedAsync(DateRange dateRange)
    {
        await LoadCalendarEvents(dateRange);
    }

    private async Task OnItemClickedAsync(CalendarItem item)
    {
        var eventItem = _events.FirstOrDefault(e => e.Start == item.Start);

        await ShowEventDialog(eventItem, mainLayout);
    }

    private async Task LoadCalendarEvents(DateRange dateRange)
    {
        var startDate = dateRange.Start ?? DateTime.Today;
        var endDate = dateRange.End ?? DateTime.Today.AddMonths(1);

        var poleDanceClasses = await classService.GetClassesByDateRangeAsync(startDate, endDate, CancellationToken.None);
        _events = poleDanceClasses.Select(c => new Event
            {
                EventId = c.Id,
                Start = c.Date ?? DateTime.MinValue,
                End = (c.Date ?? DateTime.MinValue).AddHours(c.Duration),
                Title = c.Training.Name,
                Location = c.Location,
                Text = res["Trainer"] + $": {c.Trainer.FirstName} {c.Trainer.LastName}",
                Color = c.Registrations.Any(u => u.UserId == mainLayout.userId) ? Event.UserRegisteredEventColor : Event.DefaultEventColor
            }).ToList();
    }

    private async Task ShowEventDialog(Event item, MainLayout mainLayout)
    {
        var poleDanceClass = await classService.GetClassByIdAsync(item.EventId, CancellationToken.None);
        var parameters = new DialogParameters { ["Class"] = poleDanceClass, ["MainLayout"] = mainLayout, ["OnClassEdited"] = EventCallback.Factory.Create(this, OnClassEdited) };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        dialogService.Show<PDClassViewDialog>(res["ClassDetails"], parameters, options);
    }

    private async Task OnClassEdited()
    {
        await LoadCalendarEvents(new DateRange(DateTime.Today, DateTime.Today.AddMonths(1)));
    }
}