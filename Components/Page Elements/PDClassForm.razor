@inject IStringLocalizer<SharedResource> res
@inject ISnackbar snackbar
@inject IUserService userService
@inject IClassService classService
@inject IDialogService DialogService
@inject IRegistrationService registrationService

<EditForm Model="ClassModel" OnValidSubmit="HandleValidSubmit" onkeypress="return event.keyCode!=13">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudGrid>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="7">
                    <MudTextField @bind-Value="ClassModel.Name" Label="@res["ClassName"]" Required="true" />
                </MudItem>
                <MudItem xs="5">
                    <MudAutocomplete T="ApplicationUser" @bind-Value="selectedTrainer" Label="@res["Trainer"]" KeyUpPreventDefault="true"
                    SearchFunc="SearchTrainers" Clearable="true" ToStringFunc="@(user => user?.FirstName + " " + user?.LastName)" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="ClassModel.Date"
                    Label="@res["Date"]"
                    Required="true"
                    IsDateDisabledFunc="@((DateTime dt) => dt < DateTime.Today)"
                    PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="6">
                    <DateTimePicker Time="ClassModel.Time" TimeChanged="OnTimeChanged" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="ClassModel.Duration" Label="@res["DurationInHours"]" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="ClassModel.Location" Label="@res["Location"]" />
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="10">
                    <MudAutocomplete T="ApplicationUser" @bind-Value="selectedParticipant" Label="@res["Participants"]" KeyUpPreventDefault="true"
                    SearchFunc="SearchParticipants" Clearable="true" ToStringFunc="@(user => user?.FirstName + " " + user?.LastName)" />
                </MudItem>
                <MudItem xs="2" Class="d-flex justify-space-between">
                    <MudToolBar Class="d-flex justify-left">
                        <MudTooltip Text="@res["Add"]">
                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="AddParticipant" Color="Color.Primary" />
                        </MudTooltip>
                        <MudTooltip Text="@ParticipantsListTooltip">
                            <MudIconButton Icon="@Icons.Material.Filled.People" OnClick="ShowParticipants"/>
                        </MudTooltip>
                    </MudToolBar>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="8">
                    <MudGrid>
                        <MudItem xs="4" Style="align-self: center;">
                            <MudText>
                                @res["IsRegistrationOpen"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="8" Style="align-self: center;">
                            @if (ClassModel.IsRegistrationOpen)
                            {
                                <MudTooltip Text="@res["RegistrationOpen"]">
                                    <MudSwitch @bind-Value="ClassModel.IsRegistrationOpen" Color="Color.Primary" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="@res["RegistrationClosed"]">
                                    <MudSwitch @bind-Value="ClassModel.IsRegistrationOpen" Color="Color.Secondary" />
                                </MudTooltip>
                            }
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="4">
                    <MudToolBar Class="justify-end">
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">@res["Save"]</MudButton>
                        <MudButton Style="margin-left: 10px;" Color="Color.Secondary" OnClick="Cancel" Variant="Variant.Filled">@res["Cancel"]</MudButton>
                    </MudToolBar>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Class? ClassModel { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public ApplicationUser? User { get; set; } = new ApplicationUser();

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public ICollection<ApplicationUser> Participants { get; set; } = new List<ApplicationUser>();

    private PDClassValidator? classValidator;
    private ApplicationUser? selectedTrainer;
    private ApplicationUser? selectedParticipant;
    private ICollection<ApplicationUser> allUsers = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        if (!IsEditMode)
        {
            if (User != null)
            {
                selectedTrainer = User;
            }

            ClassModel.Name = ClassModel.Training.Name;
        }
        else
        {
            selectedTrainer = ClassModel.Trainer;
        }

        allUsers = await userService.GetAllUsersAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Participants = await registrationService.GetRegisteredUsersByClassIdAsync(ClassModel.Id);
    }

    private async Task<IEnumerable<ApplicationUser>> SearchTrainers(string searchText, CancellationToken cancellationToken)
    {
        return await userService.SearchTrainersAsync(searchText, cancellationToken);
    }

    private async Task<IEnumerable<ApplicationUser>> SearchParticipants(string searchText, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            return allUsers;
        }

        return await userService.SearchParticipantsAsync(searchText, cancellationToken);
    }

    private void AddParticipant()
    {
        if (selectedParticipant != null && !Participants.Any(p => p.Id == selectedParticipant.Id))
        {
            Participants.Add(selectedParticipant);
        }
        else if (selectedParticipant is null)
        {
            snackbar.Add(res["OperationWrong"], Severity.Warning);
        }
        else
        {
            snackbar.Add(res["ParticipantAlreadyAdded"], Severity.Warning);
        }
    }

    private void RemoveParticipant(ApplicationUser participant)
    {
        Participants.Remove(participant);
    }

    private void ShowParticipants()
    {
        if (!Participants.Any())
        {
            snackbar.Add(res["ParticipantsListEmpty"], MudBlazor.Severity.Info);
            return;
        }

        var parameters = new DialogParameters
        {
            { "Participants", Participants },
            { "OnRemoveParticipant", EventCallback.Factory.Create<ApplicationUser>(this, RemoveParticipant) },
            { "IsReadOnly", false }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        DialogService.Show<ParticipantsDialog>(res["RegisteredParticipants"], parameters, options);
    }

    private async Task HandleValidSubmit()
    {
        if (!await CustomValidators.ValidateAndShowErrors(new PDClassValidator(res), ClassModel, snackbar))
        {
            return;
        }

        try
        {
            ClassModel.Trainer = selectedTrainer;

            ClassModel.Registrations = Participants
                                            .DistinctBy(p => p.Id)
                                            .Select(p => new Registration { User = p, UserId = p.Id, Status = RegistrationStatus.Confirmed, RegistrationDate = DateTime.UtcNow })
                                            .ToList();

            if (IsEditMode)
            {
                await classService.UpdateClassAsync(ClassModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassEdition"], MudBlazor.Severity.Success);
                await Cancel();
            }
            else
            {
                await classService.AddNewClassAsync(ClassModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassAddition"], MudBlazor.Severity.Success);
                await Cancel();
            }
        }
        catch (Exception ex)
        {
            snackbar.Add(res["ErrorDuringClassOperation"] + $": {ex.Message}", MudBlazor.Severity.Error);
            await OnInitializedAsync();
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnTimeChanged(TimeSpan? newTime)
    {
        ClassModel.Time = newTime;
    }

    private string ParticipantsListTooltip => $"{res["ParticipantsList"]} ({Participants.Count})";
}