@inject IStringLocalizer<SharedResource> res
@inject ISnackbar snackbar
@inject IUserService userService
@inject IClassService classService

<EditForm Model="classModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudGrid>
        <MudItem xs="12">
            <MudAutocomplete T="string" @bind-Value="selectedTrainer" Label="@res["Trainer"]"
                             SearchFunc="SearchTrainers" Clearable="true" />
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="classModel.Date"
                                   Label="@res["Date"]"
                                   Required="true"
                                   IsDateDisabledFunc="@((DateTime dt) => dt < DateTime.Today)"
                                   PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="6">
                    <DateTimePicker Time="_time" TimeChanged="OnTimeChanged" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="classModel.Duration" Label="@res["DurationInHours"]" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="classModel.Location" Label="@res["Location"]" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="9">
                </MudItem>
                <MudItem xs="3">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">@res["Save"]</MudButton>
                    <MudButton Color="Color.Secondary" OnClick="Cancel" Variant="Variant.Filled">@res["Cancel"]</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Class? classModel { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public ApplicationUser? User { get; set; } = new ApplicationUser();

    [Parameter]
    public bool isEditMode { get; set; }

    private PDClassValidator? classValidator;
    private TimeSpan? _time;
    private string selectedTrainer = string.Empty;

    protected override void OnInitialized()
    {
        if (!isEditMode)
        {

            if (classModel == null)
            {
                classModel = new Class();
            }

            if (User != null)
            {
                selectedTrainer = $"{User.FirstName} {User.LastName}";
                classModel.Trainer = selectedTrainer;
            }
        }

        classModel.Date = DateTime.Today;
        _time = DateTime.Now.TimeOfDay; // Initialize _time with the current time
    }

    protected override void OnParametersSet()
    {
        classValidator = new PDClassValidator(res);
    }

    private async Task<IEnumerable<string>> SearchTrainers(string value, CancellationToken token)
    {
        return await userService.SearchTrainersAsync(value);
    }

    private async Task HandleValidSubmit()
    {
        var validationResult = await classValidator.ValidateAsync(classModel);
        if (!validationResult.IsValid)
        {
            foreach (var error in validationResult.Errors)
            {
                snackbar.Add(error.ErrorMessage, MudBlazor.Severity.Error);
            }
            return;
        }

        try
        {
            if (isEditMode)
            {
                classModel.Date = classModel.Date + _time;
                await classService.UpdateClassAsync(classModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassEdition"], MudBlazor.Severity.Success);
                await Cancel();
            }
            else
            {
                classModel.Date = classModel.Date + _time;
                await classService.AddNewClassAsync(classModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassAddition"], MudBlazor.Severity.Success);
                await Cancel();
            }
        }
        catch (Exception ex)
        {
            snackbar.Add(res["ErrorDuringClassOperation"] + $": {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnTimeChanged(TimeSpan? newTime)
    {
        _time = newTime;
    }
}
