@inject IStringLocalizer<SharedResource> res
@inject ISnackbar snackbar
@inject IUserService userService
@inject IClassService classService
@inject IDialogService DialogService
@inject IRegistrationService registrationService

<EditForm Model="ClassModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudGrid>
        <MudItem xs="7">
            <MudAutocomplete T="ApplicationUser" @bind-Value="selectedTrainer" Label="@res["Trainer"]"
            SearchFunc="SearchTrainers" Clearable="true" ToStringFunc="@(user => user?.FirstName + " " + user?.LastName)" />
        </MudItem>
        <MudItem xs="5">
            <MudGrid>
                <MudItem xs="6">
                    <MudText>
                        @res["IsRegistrationOpen"]
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    @if (ClassModel.IsRegistrationOpen)
                    {
                        <MudTooltip Text="@res["RegistrationOpen"]">
                            <MudSwitch @bind-Value="ClassModel.IsRegistrationOpen" Color="Color.Primary" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="@res["RegistrationClosed"]">
                            <MudSwitch @bind-Value="ClassModel.IsRegistrationOpen" Color="Color.Secondary" />
                        </MudTooltip>
                    }
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="ClassModel.Date"
                    Label="@res["Date"]"
                    Required="true"
                    IsDateDisabledFunc="@((DateTime dt) => dt < DateTime.Today)"
                    PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="6">
                    <DateTimePicker Time="_time" TimeChanged="OnTimeChanged" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="ClassModel.Duration" Label="@res["DurationInHours"]" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="ClassModel.Location" Label="@res["Location"]" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12">
                    <MudAutocomplete T="ApplicationUser" @bind-Value="selectedParticipant" Label="@res["Participants"]"
                    SearchFunc="SearchParticipants" Clearable="true" ToStringFunc="@(user => user?.FirstName + " " + user?.LastName)" />
                    <MudButton OnClick="AddParticipant" Color="Color.Primary" Variant="Variant.Filled">@res["AddParticipant"]</MudButton>
                    <MudButton Disabled="@(!Participants.Any())" OnClick="ShowParticipants" Color="Color.Primary" Variant="Variant.Filled">@res["Registered"] (@Participants.Count)</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="9">
                </MudItem>
                <MudItem xs="3">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">@res["Save"]</MudButton>
                    <MudButton Color="Color.Secondary" OnClick="Cancel" Variant="Variant.Filled">@res["Cancel"]</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Class? ClassModel { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public ApplicationUser? User { get; set; } = new ApplicationUser();

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public ICollection<ApplicationUser> Participants { get; set; } = new List<ApplicationUser>();

    private PDClassValidator? classValidator;
    private TimeSpan? _time;
    private ApplicationUser? selectedTrainer;
    private ApplicationUser? selectedParticipant;
    private ICollection<ApplicationUser> allUsers = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        if (!IsEditMode)
        {
            if (ClassModel == null)
            {
                ClassModel = new Class();
            }

            if (User != null)
            {
                selectedTrainer = User;
                ClassModel.Trainer = selectedTrainer;
            }

            _time = DateTime.UtcNow.TimeOfDay;
            ClassModel.Date = DateTime.Today;
        }
        else
        {
            selectedTrainer = ClassModel.Trainer;
        }

        allUsers = await userService.GetAllUsersAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _time = ClassModel.Date?.TimeOfDay;
        Participants = await registrationService.GetRegisteredUsersByClassIdAsync(ClassModel.Id);
    }

    private async Task<IEnumerable<ApplicationUser>> SearchTrainers(string searchText, CancellationToken cancellationToken)
    {
        return await userService.SearchTrainersAsync(searchText, cancellationToken);
    }

    private async Task<IEnumerable<ApplicationUser>> SearchParticipants(string searchText, CancellationToken cancellationToken)
    {
        return await userService.SearchParticipantsAsync(searchText, cancellationToken);
    }

    private void AddParticipant()
    {
        if (selectedParticipant != null && !Participants.Any(p => p.Id == selectedParticipant.Id))
        {
            Participants.Add(selectedParticipant);
        }
        else
        {
            snackbar.Add(res["ParticipantAlreadyAdded"], Severity.Warning);
        }
    }

    private void RemoveParticipant(ApplicationUser participant)
    {
        Participants.Remove(participant);
    }

    private void ShowParticipants()
    {
        var parameters = new DialogParameters
        {
            { "Participants", Participants },
            { "OnRemoveParticipant", EventCallback.Factory.Create<ApplicationUser>(this, RemoveParticipant) }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        DialogService.Show<ParticipantsDialog>(res["RegisteredParticipants"], parameters, options);
    }

    private async Task HandleValidSubmit()
    {
        if (!await CustomValidators.ValidateAndShowErrors(new PDClassValidator(res), ClassModel, snackbar))
        {
            return;
        }

        try
        {
            ClassModel.Trainer = selectedTrainer;

            ClassModel.Registrations.Clear();
            ClassModel.Registrations = Participants
                                            .DistinctBy(p => p.Id)
                                            .Select(p => new Registration { User = p, UserId = p.Id, Status = RegistrationStatus.Confirmed })
                                            .ToList();

            if (IsEditMode)
            {
                ClassModel.Date = ClassModel.Date + _time;
                await classService.UpdateClassAsync(ClassModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassEdition"], MudBlazor.Severity.Success);
                await Cancel();
            }
            else
            {
                ClassModel.Date = ClassModel.Date + _time;
                await classService.AddNewClassAsync(ClassModel, CancellationToken.None);
                snackbar.Add(res["SuccessClassAddition"], MudBlazor.Severity.Success);
                await Cancel();
            }
        }
        catch (Exception ex)
        {
            snackbar.Add(res["ErrorDuringClassOperation"] + $": {ex.Message}", MudBlazor.Severity.Error);
            await OnInitializedAsync();
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnTimeChanged(TimeSpan? newTime)
    {
        _time = newTime;
    }
}