@inherits LayoutComponentBase
@inject NavigationManager nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider/>
<MudSnackbarProvider />

<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar Style="@($"background:{Colors.Brown.Lighten2}")">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> mPole
            <MudSpacer />
            <MudButtonGroup Color="Color.Inherit">
                @if (!isAuthenticated)
                {
                    <MudButton OnClick="@NavigateToLogIn">Zaloguj</MudButton>
                    <MudButton OnClick="@NavigateToRegister">Zarejestruj</MudButton>
                }
                else
                {
                    <MudButton>Wyloguj</MudButton>
                }
            </MudButtonGroup>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent style="padding: 6rem 2rem 2rem 2rem">
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code {
    bool _drawerOpen = false;
    public bool isAuthenticated = false;
    public bool isAdmin = false;
    public ApplicationUser user = new ApplicationUser();
    public string userName = "Gość";
    public string userId = string.Empty;
    public IList<string> userRoles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            userName = authState.User?.Identity?.Name ?? "Użytkownik";
            user = await userManager.GetUserAsync(authState.User);
            userId = user.Id;
            isAdmin = await userManager.IsInRoleAsync(user, "Admin");
        }
    }

    void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private void NavigateToLogIn() => nav.NavigateTo("/Account/Login");
    private void NavigateToRegister() => nav.NavigateTo("/Account/Register");
}