@inherits LayoutComponentBase
@inject NavigationManager nav
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Style="@($"background:{Colors.Brown.Lighten1}")">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> mPole
        <MudSpacer />
        <MudButtonGroup Color="Color.Inherit">
            @if (!isAuthenticated)
            {
                <MudButton OnClick="@NavigateToLogIn">Log In</MudButton>
                <MudButton OnClick="@NavigateToRegister">Register</MudButton>
            }
            else
            {
                <MudButton OnClick="@NavigateToAccountManagement">Account</MudButton>
                <MudButton>Log Out</MudButton>
            }
        </MudButtonGroup>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent style="padding: 6rem 2rem 2rem 2rem">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = false;
    bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;
    }

    void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private void NavigateToLogIn() => nav.NavigateTo("/Account/Login");
    private void NavigateToRegister() => nav.NavigateTo("/Account/Register");
    private void NavigateToAccountManagement() => nav.NavigateTo("/Account/Manage");
}