@page "/instructor/training-plans"

@inject ITrainingService trainingService
@inject IStringLocalizer<SharedResource> res
@inject IDialogService dialogService
@inject NavigationManager nav
@inject ISnackbar Snackbar

<PageTitle>@res["TrainingPlans"]</PageTitle>

@if (isLoading)
{
    <Loader />
}
else
{
    <MudButton @onclick="NavigateToAdd" Variant="Variant.Filled" Style="margin-bottom: 2rem">
        @res["TrainingAdd"]
    </MudButton>

    if (trainings.Count == 0)
    {
        <MudText Typo="Typo.h6">@res["TrainingNoPlansMessage"]</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var training in paginatedTrainings)
            {
                <MudItem xs="12">
                    <MudCard>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudCardMedia Image="@training.ImageUrl" Width="100%" />
                            </MudItem>
                            <MudItem xs="8">
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudGrid>
                                                <MudItem xs="10">
                                                    <MudText Typo="Typo.h5">@training.Name</MudText>
                                                    <MudText Typo="Typo.subtitle2">@res["Type"]: @res[$"TrainingType_{training.Type}"]</MudText>
                                                    <MudText Typo="Typo.subtitle2">@res["Level"]: @res[$"Level_{training.Level}"]</MudText>
                                                </MudItem>
                                                <MudItem xs="2" Class="d-flex justify-end">
                                                    <MudCardActions>
                                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditTraining(training.Id)" />
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnButtonClicked(training)" />
                                                    </MudCardActions>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudDivider />
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.body1">@training.Description</MudText>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudGrid>
                                                <MudItem xs="10"></MudItem>
                                                <MudItem xs="2" Class="d-flex justify-end">
                                                    <MudButton Variant="Variant.Filled" OnClick="() => OrganiseClassBasedOnTrainingPlan(training.Id)">
                                                        @res["ClassOrganise"]
                                                    </MudButton>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudItem>
                        </MudGrid>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <MudPagination Count="@pagesCount" SelectedChanged="OnPageChanged" Class="d-flex align-center" Style="margin-top: 2rem" />
    }
}

@code {
    private ICollection<Training> trainings = new List<Training>();
    private ICollection<Training> paginatedTrainings = new List<Training>();
    private bool isLoading = true;
    private int pageSize = 2;
    private int pageIndex = 1;
    private int totalItems;
    private int pagesCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trainings = await trainingService.GetTrainingsAsync();
            totalItems = trainings.Count;
            pagesCount = (int)Math.Ceiling((double)totalItems / pageSize);
            UpdatePaginatedTrainings();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnPageChanged(int pageIndex)
    {
        this.pageIndex = pageIndex;
        UpdatePaginatedTrainings();
    }

    private void UpdatePaginatedTrainings()
    {
        int startIndex = (pageIndex - 1) * pageSize;
        paginatedTrainings = trainings.Skip(startIndex).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void NavigateToAdd()
    {
        nav.NavigateTo("/instructor/training-plans/add");
    }

    private void EditTraining(int trainingId)
    {
        nav.NavigateTo($"/instructor/training-plans/edit/{trainingId}");
    }

    private async void OnButtonClicked(Training training)
    {
        bool? result = await dialogService.ShowMessageBox(
            res["Warning"],
            res["WarningTrainingDeletion"],
            yesText: res["Delete"], cancelText: res["Cancel"]);

        if (result == true)
        {
            await DeleteTraining(training);
        }

        StateHasChanged();
    }

    private async Task DeleteTraining(Training training)
    {
        try
        {
            await trainingService.DeleteTrainingAsync(training.Id, CancellationToken.None);
            trainings = trainings.Where(t => t.Id != training.Id).ToList();
            UpdatePaginatedTrainings();
            Snackbar.Add(res["SuccessTrainingDeletionMessage"] + $" {training.Name}", MudBlazor.Severity.Success);
            nav.NavigateTo("/instructor/training-plans");
        }
        catch (Exception ex)
        {
            Snackbar.Add(res["ErrorDuringTrainingDeletion"] + $": {ex.Message}", MudBlazor.Severity.Success);
        }
    }

    public async Task OrganiseClassBasedOnTrainingPlan(int trainingId)
    {
        //class adding TO DO
    }
}
